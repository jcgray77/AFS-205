apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o ./output
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: mongo
    name: mongo
  spec:
    ports:
    - name: "27017"
      port: 27017
      targetPort: 27017
    selector:
      io.kompose.service: mongo
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o ./output
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: nginx
    name: nginx
  spec:
    ports:
    - name: "80"
      port: 80
      targetPort: 80
    - name: "443"
      port: 443
      targetPort: 443
    selector:
      io.kompose.service: nginx
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o ./output
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: node
    name: node
  spec:
    ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
    selector:
      io.kompose.service: node
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o ./output
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: redis
    name: redis
  spec:
    ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
    selector:
      io.kompose.service: redis
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o ./output
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: mongo
    name: mongo
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: mongo
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o ./output
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/fsw205-network: "true"
          io.kompose.service: mongo
      spec:
        containers:
        - env:
          - name: MONGODB_DBNAME
            valueFrom:
              configMapKeyRef:
                key: MONGODB_DBNAME
                name: docker-env-mongo-production-env
          - name: MONGODB_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: MONGODB_PASSWORD
                name: docker-env-mongo-production-env
          - name: MONGODB_ROLE
            valueFrom:
              configMapKeyRef:
                key: MONGODB_ROLE
                name: docker-env-mongo-production-env
          - name: MONGODB_ROOT_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: MONGODB_ROOT_PASSWORD
                name: docker-env-mongo-production-env
          - name: MONGODB_ROOT_ROLE
            valueFrom:
              configMapKeyRef:
                key: MONGODB_ROOT_ROLE
                name: docker-env-mongo-production-env
          - name: MONGODB_ROOT_USERNAME
            valueFrom:
              configMapKeyRef:
                key: MONGODB_ROOT_USERNAME
                name: docker-env-mongo-production-env
          - name: MONGODB_USERNAME
            valueFrom:
              configMapKeyRef:
                key: MONGODB_USERNAME
                name: docker-env-mongo-production-env
          image: fsw205/mongo
          imagePullPolicy: ""
          name: mongo
          ports:
          - containerPort: 27017
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: v1
  data:
    MONGODB_DBNAME: AFS205
    MONGODB_PASSWORD: password
    MONGODB_ROLE: readWrite
    MONGODB_ROOT_PASSWORD: password
    MONGODB_ROOT_ROLE: root
    MONGODB_ROOT_USERNAME: dbadmin
    MONGODB_USERNAME: webrole
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mongo-docker-env-mongo-production-env
    name: docker-env-mongo-production-env
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: fsw205-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/fsw205-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/fsw205-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o ./output
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: nginx
    name: nginx
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: nginx
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o ./output
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/fsw205-network: "true"
          io.kompose.service: nginx
      spec:
        containers:
        - image: fsw205/nginx
          imagePullPolicy: ""
          name: nginx
          ports:
          - containerPort: 80
          - containerPort: 443
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: fsw205-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/fsw205-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/fsw205-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o ./output
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: node
    name: node
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: node
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o ./output
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/fsw205-network: "true"
          io.kompose.service: node
      spec:
        containers:
        - env:
          - name: NODE_ENV
            valueFrom:
              configMapKeyRef:
                key: NODE_ENV
                name: docker-env-app-production-env
          image: fsw205/node-fsw205
          imagePullPolicy: ""
          name: node-fsw205
          ports:
          - containerPort: 8080
          resources: {}
          workingDir: /var/www/fsw205
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: v1
  data:
    NODE_ENV: production
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: node-docker-env-app-production-env
    name: docker-env-app-production-env
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: fsw205-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/fsw205-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/fsw205-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        convert -f docker-compose.yml -o ./output
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: redis
    name: redis
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: redis
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            convert -f docker-compose.yml -o ./output
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/fsw205-network: "true"
          io.kompose.service: redis
      spec:
        containers:
        - image: fsw205/redis
          imagePullPolicy: ""
          name: redis
          ports:
          - containerPort: 6379
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: fsw205-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/fsw205-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/fsw205-network: "true"
kind: List
metadata: {}

